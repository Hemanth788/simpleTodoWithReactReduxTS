{"version":3,"sources":["components/ColorModeSwitcher.tsx","store/actions.ts","components/TopBar.tsx","components/TodoList.tsx","components/TodoAdd.tsx","store/store.ts","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","ADD_TODO","DELETE_TODO","UPDATE_TODO","TOGGLE_TODO","SET_NEWTODO","SET_TODOS","setTodos","todos","type","payload","TopBar","dispatch","useDispatch","pt","templateColumns","columnGap","url","a","fetch","response","json","TodoListItems","useSelector","state","map","todo","id","mx","value","onChange","evt","target","TodoList","TodoAdd","newTodo","placeholder","updateTodo","toggleTodo","done","removeTodo","filter","addTodo","Math","max","intialState","store","createStore","action","applyMiddleware","thunk","App","theme","maxWidth","margin","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ffefc9c1.chunk.js","sourcesContent":["import * as React from \"react\"\r\nimport {\r\n  useColorMode,\r\n  useColorModeValue,\r\n  IconButton,\r\n  IconButtonProps,\r\n} from \"@chakra-ui/react\"\r\nimport { FaMoon, FaSun } from \"react-icons/fa\"\r\n\r\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\r\n\r\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\r\n  const { toggleColorMode } = useColorMode()\r\n  const text = useColorModeValue(\"dark\", \"light\")\r\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\r\n\r\n  return (\r\n    <IconButton\r\n      size=\"md\"\r\n      fontSize=\"lg\"\r\n      variant=\"ghost\"\r\n      color=\"current\"\r\n      marginLeft=\"2\"\r\n      onClick={toggleColorMode}\r\n      icon={<SwitchIcon />}\r\n      aria-label={`Switch to ${text} mode`}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","import { Action } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { Store, Todo } from \"./types\";\r\n\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const DELETE_TODO = \"DELETE_TODO\";\r\nexport const UPDATE_TODO = \"UPDATE_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\nexport const SET_NEWTODO = \"SET_NEWTODO\";\r\nexport const SET_TODOS = \"SET_TODOS\";\r\n\r\nexport type ActionTypes =\r\n  | {\r\n      type: typeof ADD_TODO;\r\n    }\r\n  | {\r\n      type: typeof DELETE_TODO;\r\n      payload: number;\r\n    }\r\n  | {\r\n      type: typeof SET_TODOS;\r\n      payload: Todo[];\r\n    }\r\n  | {\r\n      type: typeof UPDATE_TODO;\r\n      payload: {\r\n        id: number;\r\n        text: string;\r\n      };\r\n    }\r\n  | {\r\n      type: typeof TOGGLE_TODO;\r\n      payload: number;\r\n    }\r\n  | {\r\n      type: typeof SET_NEWTODO;\r\n      payload: string;\r\n    };\r\n\r\nexport const addTodo = (): ActionTypes => ({ type: ADD_TODO });\r\nexport const deleteTodo = (id: number): ActionTypes => ({\r\n  type: DELETE_TODO,\r\n  payload: id,\r\n});\r\nexport const updateTodo = (id: number, text: string): ActionTypes => ({\r\n  type: UPDATE_TODO,\r\n  payload: {\r\n    id,\r\n    text,\r\n  },\r\n});\r\nexport const toggleTodo = (id: number): ActionTypes => ({\r\n  type: TOGGLE_TODO,\r\n  payload: id,\r\n});\r\nexport const setNewTodo = (text: string): ActionTypes => ({\r\n  type: SET_NEWTODO,\r\n  payload: text,\r\n});\r\nexport const setTodos = (todos: Todo[]): ActionTypes => ({\r\n  type: SET_TODOS,\r\n  payload: todos,\r\n});\r\n\r\nexport const getTodos = (\r\n  url: string\r\n): ThunkAction<void, Store, unknown, Action<string>> => {\r\n  return async function (dispatch) {\r\n    const response = await fetch(url);\r\n    const todos: Todo[] = await response.json();\r\n    dispatch(setTodos(todos));\r\n  };\r\n};\r\n","import * as React from \"react\";\r\nimport { Button, Grid } from \"@chakra-ui/react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\r\nimport { getTodos } from \"../store/actions\";\r\nconst url =\r\n  \"https://raw.githubusercontent.com/jherr/todos-four-ways/master/data/todos.json\";\r\n\r\nfunction TopBar() {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Grid pt={2} templateColumns=\"1fr 1fr\" columnGap=\"3\">\r\n      <ColorModeSwitcher />\r\n      <Button onClick={() => dispatch(getTodos(url))}>Load</Button>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default TopBar;\r\n","import * as React from \"react\";\r\nimport { Button, Input, Flex, Checkbox, Heading } from \"@chakra-ui/react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Store } from \"../store/types\";\r\nimport { deleteTodo, toggleTodo, updateTodo } from \"../store/actions\";\r\nfunction TodoListItems() {\r\n  const dispatch = useDispatch();\r\n  const todos = useSelector((state: Store) => state.todos);\r\n  return (\r\n    <>\r\n      {todos.map((todo: { id: number; text: string }) => (\r\n        <Flex pt={2} key={todo.id}>\r\n          <Checkbox onClick={() => dispatch(toggleTodo(todo.id))} />\r\n          <Input\r\n            mx={2}\r\n            value={todo.text}\r\n            onChange={(evt) => dispatch(updateTodo(todo.id, evt.target.value))}\r\n          />\r\n          <Button onClick={() => dispatch(deleteTodo(todo.id))}>Delete</Button>\r\n        </Flex>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction TodoList() {\r\n  return (\r\n    <>\r\n      <Heading>Todo List</Heading>\r\n      <TodoListItems />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import * as React from \"react\";\r\nimport { Button, Input, Grid } from \"@chakra-ui/react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Store } from \"../store/types\";\r\nimport { addTodo, setNewTodo } from \"../store/actions\";\r\nfunction TodoAdd() {\r\n  const dispatch = useDispatch();\r\n  const newTodo = useSelector((state: Store) => state.newTodo);\r\n  return (\r\n    <Grid pt={2} templateColumns=\"5fr 1fr\" columnGap=\"3\">\r\n      <Input\r\n        placeholder=\"New todo\"\r\n        value={newTodo}\r\n        onChange={(evt) => dispatch(setNewTodo(evt.target.value))}\r\n      />\r\n      <Button onClick={() => dispatch(addTodo())}>Add Todo</Button>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default TodoAdd;\r\n","// Standard interface and functions\r\nimport { Todo, Store } from \"./types\";\r\nimport {\r\n  ActionTypes,\r\n  ADD_TODO,\r\n  DELETE_TODO,\r\n  SET_NEWTODO,\r\n  SET_TODOS,\r\n  TOGGLE_TODO,\r\n  UPDATE_TODO,\r\n} from \"./actions\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nexport const updateTodo = (todos: Todo[], id: number, text: string): Todo[] =>\r\n  todos.map((todo) => ({\r\n    ...todo,\r\n    text: todo.id === id ? text : todo.text,\r\n  }));\r\n\r\nexport const toggleTodo = (todos: Todo[], id: number): Todo[] =>\r\n  todos.map((todo) => ({\r\n    ...todo,\r\n    done: todo.id === id ? !todo.done : todo.done,\r\n  }));\r\n\r\nexport const removeTodo = (todos: Todo[], id: number): Todo[] =>\r\n  todos.filter((todo) => todo.id !== id);\r\n\r\nexport const addTodo = (todos: Todo[], text: string): Todo[] => [\r\n  ...todos,\r\n  {\r\n    id: Math.max(0, Math.max(...todos.map(({ id }) => id))) + 1,\r\n    text,\r\n    done: false,\r\n  },\r\n];\r\n\r\nconst intialState: Store = {\r\n  todos: [],\r\n  newTodo: \"\",\r\n};\r\n\r\nfunction todoReducer(state = intialState, action: ActionTypes) {\r\n  switch (action.type) {\r\n    case SET_TODOS:\r\n      return { ...state, todos: action.payload };\r\n    case DELETE_TODO:\r\n      return {\r\n        ...state,\r\n        todos: removeTodo(state.todos, action.payload),\r\n      };\r\n    case UPDATE_TODO:\r\n      return {\r\n        ...state,\r\n        todos: updateTodo(state.todos, action.payload.id, action.payload.text),\r\n      };\r\n    case TOGGLE_TODO:\r\n      return { ...state, todos: toggleTodo(state.todos, action.payload) };\r\n    case ADD_TODO:\r\n      return {\r\n        ...state,\r\n        newTodo: \"\",\r\n        todos: addTodo(state.todos, state.newTodo),\r\n      };\r\n    case SET_NEWTODO:\r\n      return { ...state, newTodo: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst store = createStore(todoReducer, applyMiddleware(thunk));\r\nexport default store;\r\n","import * as React from \"react\";\r\nimport { ChakraProvider, Box, theme } from \"@chakra-ui/react\";\r\nimport TopBar from \"./components/TopBar\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport TodoAdd from \"./components/TodoAdd\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store/store\";\r\n\r\nexport function App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <ChakraProvider theme={theme}>\r\n        <Box maxWidth=\"8xl\" margin=\"auto\" p={5}>\r\n          <TopBar />\r\n          <TodoList />\r\n          <TodoAdd />\r\n        </Box>\r\n      </ChakraProvider>\r\n    </Provider>\r\n  );\r\n}\r\n","import { ReportHandler } from \"web-vitals\"\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://cra.link/PWA\",\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It is the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\")\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\")\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\",\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import { ColorModeScript } from \"@chakra-ui/react\"\r\nimport * as React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { App } from \"./App\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ColorModeScript />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorker.unregister()\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}